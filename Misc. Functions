#Implement functions related to strings, lists, sets and tuples.


"""Concatenates the given list of strings into a single string.
Returns the single string.
If the given list is empty, returns an empty string.
"""

def concatenate(lst):
    # Join all the strings in the list into a single string
    return ''.join(lst)

result1 = concatenate(["a", "b", "c"])
result2 = concatenate([])

print(result1)  # Output: "abc"
print(result2)  # Output: ""

# TODO

"""Return a new list containing all but the last element in the given list.
    If the list is empty, returns None.
"""

def all_but_last(lst):
    # Return None if the list is empty
    if not lst:
        return None
    # Return the list without the last element
    return lst[:-1]

result1 = all_but_last([1, 2, 3, 4, 5])
result2 = all_but_last(["a", "d", 1, 3, 4, None])
result3 = all_but_last([])

print(result1)  # Output: [1, 2, 3, 4]
print(result2)  # Output: ["a", "d", 1, 3, 4]
print(result3)  # Output: None

# TODO

"""Return the given list without duplicates.
    The order of the returned list doesn't matter.
"""

def remove_duplicates(lst):
    seen = set()
    result = []
    for item in lst:
        if item not in seen:
            seen.add(item)
            result.append(item)
    return result


result1 = remove_duplicates([1, 2, 1, 3, 4])
result2 = remove_duplicates([])

print(result1)  # Output: [1, 2, 3, 4]
print(result2)  # Output: []

# TODO

"""Reverse the order of the characters in the given word.
"""

def reverse_word(s):
    # Reverse the string using slicing
    return s[::-1]

result1 = reverse_word("abcde")
result2 = reverse_word("a b c d e")
result3 = reverse_word("a  b")
result4 = reverse_word("")

print(result1)  # Output: "edcba"
print(result2)  # Output: "e d c b a"
print(result3)  # Output: "b  a"
print(result4)  # Output: ""

# TODO

"""Returns a list with all divisors of the given number n.
    The returned list should include 1 and the given number n itself.
    The order of the returned list doesn't matter. 
"""

def divisors(n):
    # Returns a list of divisors of n
    return [i for i in range(1, n+1) if n % i == 0]

print(divisors(10))  # Output: [1, 2, 5, 10]
print(divisors(1))   # Output: [1]

# TODO

""" If the given sentence starts with *, capitalizes the first and last letters of each word in the sentence,
    and return the sentence without *.
    Else, joins all the words in the given sentence, separating them with a comma, and return the result.
"""

def capitalize_or_join_words(s):
    # Check if the string starts with an asterisk
    if s.startswith("*"):
        # Remove the asterisk and split the string into words
        words = s[1:].split()
        # Capitalize the first and last letter of each word
        capitalized_words = [word[0].upper() + word[1:-1] + word[-1].upper() if len(word) > 1 else word.upper() for word in words]
        # Join the words back into a string
        return ' '.join(capitalized_words)
    else:
        # Split the string into words, removing extra spaces
        words = s.split()
        # Join the words with commas
        return ','.join(words)

result1 = capitalize_or_join_words("*i love python")
result2 = capitalize_or_join_words("i love python")
result3 = capitalize_or_join_words("i love    python  ")

print(result1)  # Output: "I LovE PythoN"
print(result2)  # Output: "i,love,python"
print(result3)  # Output: "i,love,python"

# TODO

""" Given a list of integers, moves all non-zero numbers to the beginning of the list and
    moves all zeros to the end of the list.  This function returns nothing and changes the given list itself.
"""

def move_zero(lst):
    # Count the non-zero elements
    non_zero = 0
    for i in range(len(lst)):
        if lst[i] != 0:
            lst[non_zero] = lst[i]
            non_zero += 1
    # Fill the rest of the list with zeros
    for i in range(non_zero, len(lst)):
        lst[i] = 0

list1 = [0, 1, 0, 2, 0, 3, 0, 4]
move_zero(list1)
print(list1)  # Output: [1, 2, 3, 4, 0, 0, 0, 0]

list2 = [0, 1, 2, 0, 1]
move_zero(list2)
print(list2)  # Output: [1, 2, 1, 0, 0]

list3 = [1, 2, 3, 4, 5, 6, 7, 8]
move_zero(list3)
print(list3)  # Output: [1, 2, 3, 4, 5, 6, 7, 8]

list4 = []
move_zero(list4)
print(list4)  # Output: []

# TODO
